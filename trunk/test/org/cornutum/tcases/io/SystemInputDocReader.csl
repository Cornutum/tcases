//////////////////////////////////////////////////////////////////////////////
// 
//               Copyright 2010, Starting Block Technologies
//                        www.startingblocktech.com
//
//////////////////////////////////////////////////////////////////////////////
//
//  Version: $Revision$, $Date$
//
//  Random: 66766890
//
/////////////////////////////////////////////////////////////////////////////


getSystemInputDef
{
 parameters:
  System.Name
    {
      Undefined
        {
          type = failure;
        }
      Defined;
    }
  
  Function.Count
    {
      None;
      One
        {
          properties = functions;
        }
      Many
        {
          properties = functions;
        }
    }

  Function.Name
    {
      Undefined
        {
          type = failure;
          conditions = functions;
        }
      Defined
        {
          conditions = functions;
        }
      NA
        {
          conditions = ~functions;
        }
    }
  
  Type.Count
    {
      None
        {
          type = failure;
          conditions = functions;
        }
      One
        {
          conditions = functions;
          properties = types;
        }
      Many
        {
          conditions = functions;
          properties = types;
        }
      NA
        {
          conditions = ~functions;
        }
    }

  Type.Name
    {
      Undefined
        {
          type = failure;
          conditions = types;
        }
      Defined
        {
          conditions = types;
        }
      NA
        {
          conditions = ~types;
        }
    }

  Var.Count
    {
      Undefined
        {
          type = failure;
          conditions = types, ~varSets;
        }
      None
        {
          type = once;
          conditions = types, varSets;
        }
      One
        {
          conditions = types;
          properties = vars;
        }
      Many
        {
          conditions = types;
          properties = vars;
        }
      NA
        {
          conditions = ~types;
        }
    }

  Var.Name
    {
      Undefined
        {
          type = failure;
          conditions = vars;
        }
      Defined
        {
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.WhenProperties
    {
      None
        {
          conditions = vars;
        }
      One
        {
          type = once;
          conditions = vars;
          properties = varConditions;
        }
      Many
        {
          type = once;
          conditions = vars;
          properties = varConditions;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.WhenNotProperties
    {
      None
        {
          conditions = vars;
        }
      One
        {
          type = once;
          conditions = vars;
          properties = varConditions;
        }
      Many
        {
          type = once;
          conditions = vars;
          properties = varConditions;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.Condition
    {
      None
        {
          conditions = vars;
        }
      Redefined
        {
          type = failure;
          conditions = varConditions;
        }
      Many
        {
          type = failure;
          conditions = vars, ~varConditions;
        }
      AllOf
        {
          conditions = vars, ~varConditions;
          properties = condition;
        }
      AnyOf
        {
          conditions = vars, ~varConditions;
          properties = condition;
        }
      Not
        {
          conditions = vars, ~varConditions;
          properties = condition;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.ValidValues
    {
      None
        {
          type = failure;
          conditions = vars;
        }
      One
        {
          conditions = vars;
        }
      
      Many
        {
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.FailureValues
    {
      None
        {
          conditions = vars;
        }
      One
        {
          conditions = vars;
          properties = failureValues;
        }
      
      Many
        {
          conditions = vars;
          properties = failureValues;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Var.OnceValue
    {
      Yes
        {
          conditions = vars;
        }
      No
        {
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Value.Name
    {
      Undefined
        {
          type = failure;
          conditions = vars;
        }
      Defined
        {
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Value.WhenProperties
    {
      None
        {
          conditions = vars;
        }
      One
        {
          type = once;
          conditions = vars;
          properties = valueConditions;
        }
      Many
        {
          type = once;
          conditions = vars;
          properties = valueConditions;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Value.WhenNotProperties
    {
      None
        {
          conditions = vars;
        }
      One
        {
          type = once;
          conditions = vars;
          properties = valueConditions;
        }
      Many
        {
          type = once;
          conditions = vars;
          properties = valueConditions;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Value.Condition
    {
      None
        {
          conditions = vars;
        }
      Redefined
        {
          type = failure;
          conditions = valueConditions;
        }
      Many
        {
          type = failure;
          conditions = vars, ~valueConditions;
        }
      AllOf
        {
          conditions = vars, ~valueConditions;
          properties = condition;
        }
      AnyOf
        {
          conditions = vars, ~valueConditions;
          properties = condition;
        }
      Not
        {
          conditions = vars, ~valueConditions;
          properties = condition;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Value.Properties
    {
      None
        {
          conditions = vars;
        }
      One
        {
          conditions = vars;
        }
      Many
        {
          conditions = vars;
        }
      ForFailureValue
        {
          type = failure;
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Property.Count
    {
      None
        {
          conditions = vars;
        }
      One
        {
          conditions = vars;
          properties = valueProperty;
        }
      Many
        {
          conditions = vars;
          properties = valueProperty;
        }
      ForFailureValue
        {
          type = failure;
          conditions = vars;
        }
      NA
        {
          conditions = ~vars;
        }
    }

  Property.Properties
    {
      None
        {
          type = failure;
          conditions = valueProperty;
        }
      One
        {
          conditions = valueProperty;
        }
      Many
        {
          conditions = valueProperty;
        }
      NA
        {
          conditions = ~valueProperty;
        }
    }

  VarSet.Count
    {
      None
        {
          conditions = types;
        }
      One
        {
          type = once;
          conditions = types;
          properties = varSets;
        }
      Many
        {
          conditions = types;
          properties = varSets;
        }
      NA
        {
          conditions = ~types;
        }
    }

  VarSet.Name
    {
      Undefined
        {
          type = failure;
          conditions = varSets;
        }
      Defined
        {
          conditions = varSets;
        }
      NA
        {
          conditions = ~varSets;
        }
    }

  VarSet.WhenProperties
    {
      None
        {
          conditions = varSets;
        }
      One
        {
          conditions = varSets;
          properties = varSetConditions;
        }
      Many
        {
          conditions = varSets;
          properties = varSetConditions;
        }
      NA
        {
          conditions = ~varSets;
        }
    }

  VarSet.WhenNotProperties
    {
      None
        {
          conditions = varSets;
        }
      One
        {
          conditions = varSets;
          properties = varSetConditions;
        }
      Many
        {
          conditions = varSets;
          properties = varSetConditions;
        }
      NA
        {
          conditions = ~varSets;
        }
    }

  VarSet.Condition
    {
      None
        {
          conditions = varSets;
        }
      Redefined
        {
          type = failure;
          conditions = varSetConditions;
        }
      
      Many
        {
          type = failure;
          conditions = varSets, ~varSetConditions;
        }
      AllOf
        {
          conditions = varSets, ~varSetConditions;
          properties = condition;
        }
      AnyOf
        {
          conditions = varSets, ~varSetConditions;
          properties = condition;
        }
      Not
        {
          conditions = varSets, ~varSetConditions;
          properties = condition;
        }
      NA
        {
          conditions = ~varSets;
        }
    }

  VarSet.Members
    {
      None
        {
          type = failure;
          conditions = varSets;
        }
      One
        {
          conditions = varSets;
        }
      
      Many
        {
          conditions = varSets;
        }
      NA
        {
          conditions = ~varSets;
        }
    }

  Condition.Properties
    {
      None
        {
          conditions = condition;
        }
      One
        {
          conditions = condition;
          properties = conditionMembers;
        }
      Many
        {
          conditions = condition;
          properties = conditionMembers;
        }
      NA
        {
          conditions = ~condition;
        }
    }

  Condition.Members
    {
      None
        {
          conditions = condition, conditionMembers;
        }
      Undefined
        {
          type = failure;
          conditions = condition, ~conditionMembers;
        }
      One
        {
          conditions = condition;
          properties = conditionMembers;
        }
      Many
        {
          conditions = condition;
          properties = conditionMembers;
        }
      NA
        {
          conditions = ~condition;
        }
    }
  
}
