//////////////////////////////////////////////////////////////////////////////
// 
//               Copyright 2010, Starting Block Technologies
//                        www.startingblocktech.com
//
//////////////////////////////////////////////////////////////////////////////
//
//  Version: $Revision$, $Date$
//
//  Random: 5467
//
/////////////////////////////////////////////////////////////////////////////


getGeneratorSet
{
 parameters:
  TupleGenerator.Count
    {
      None;
      One
        {
          properties = generators;
        }
      Many
        {
          properties = generators, generatorsMany;
        }
    }

  TupleGenerator.Function
    {
      Default
        {
          conditions = generators;
        }
      Defined
        {
          conditions = generators;
        }
      All
        {
          conditions = generators;
        }
      Non-identifier
        {
          conditions = generators;
          type = failure;
        }
      Duplicate
        {
          conditions = generatorsMany;
          type = failure;
        }
      NA
        {
          conditions = ~generators;
        }
    }

  TupleGenerator.Seed
    {
      Default
        {
          conditions = generators;
        }
      Defined
        {
          conditions = generators;
        }
      Non-numeric
        {
          conditions = generators;
          type = failure;
        }
      NA
        {
          conditions = ~generators;
        }
    }

  TupleGenerator.Tuples
    {
      Default
        {
          conditions = generators;
        }
      Defined
        {
          conditions = generators;
        }
      Non-numeric
        {
          conditions = generators;
          type = failure;
        }
      NA
        {
          conditions = ~generators;
        }
    }

  Combiner.Count
    {
      None
        {
          conditions = generators;
        }
      One
        {
          conditions = generators;
          properties = combiners;
        }
      Many
        {
          conditions = generators;
          properties = combiners;
        }
      NA
        {
          conditions = ~generators;
        }
    }

  Combiner.Tuples
    {
      Default
        {
          conditions = combiners;
        }
      Defined
        {
          conditions = combiners;
        }
      Non-numeric
        {
          conditions = combiners;
          type = failure;
        }
      NA
        {
          conditions = ~combiners;
        }
    }

  Include.Count
    {
      None
        {
          conditions = combiners;
        }
      One
        {
          conditions = combiners;
          properties = includes;
        }
      Many
        {
          conditions = combiners;
          properties = includes;
        }
      NA
        {
          conditions = ~combiners;
        }
    }

  Include.Var
    {
      None
        {
          conditions = includes;
          type = failure;
        }
      Valid
        {
          conditions = includes;
        }
      Invalid
        {
          conditions = includes;
          type = failure;
        }
      NA
        {
          conditions = ~includes;
        }
    }

  Exclude.Count
    {
      None
        {
          conditions = combiners;
        }
      One
        {
          conditions = combiners;
          properties = excludes;
        }
      Many
        {
          conditions = combiners;
          properties = excludes;
        }
      NA
        {
          conditions = ~combiners;
        }
    }

  Exclude.Var
    {
      None
        {
          conditions = excludes;
          type = failure;
        }
      Valid
        {
          conditions = excludes;
        }
      Invalid
        {
          conditions = excludes;
          type = failure;
        }
      NA
        {
          conditions = ~excludes;
        }
    }
}
