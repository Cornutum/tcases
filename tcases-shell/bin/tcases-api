#######################################################################
#
#                     Copyright 2019, Cornutum Project
#                              www.cornutum.org
# 
#######################################################################

pgm=`basename $0`

usage()
{
  echo Usage: $pgm "[option...] [apiSpec]" >&2
  echo "" >&2
  echo "where each 'option' is one of the following:" >&2
  echo "" >&2
  echo "  -C, -S, -D  If -C is given, produce results to test inputs to an API client, i.e. API responses. If -S is given," >&2
  echo "              produce results to test inputs to an API server, i.e. API requests. If -D is given, produce request" >&2
  echo "              test cases for an API server, i.e. API request tests. If none of these is given, the default is -S." >&2
  echo "" >&2
  echo "  -I          Produce an input definition file for either an API client (-C) or an API server (-S). If omitted," >&2
  echo "              produce the corresponding test definition file." >&2
  echo "" >&2
  echo "  -R          If specified, tests will be generated assuming that the API will strictly enforce exclusion of 'readOnly'" >&2
  echo "              properties from request parameters. If omitted, no strict enforcement is assumed." >&2
  echo "" >&2
  echo "  -W          If specified, tests will be generated assuming that the API will strictly enforce exclusion of 'writeOnly'" >&2
  echo "              properties from responses. If omitted, no strict enforcement is assumed." >&2
  echo "" >&2
  echo "  -c M[R]     Defines how input modelling and request case resolution conditions are reported. Both M (for modelling conditions)" >&2
  echo "              and R (for resolution conditions) must be one of 'log', 'fail', or 'ignore'. If 'log' is specified, conditions are" >&2
  echo "              reported using log messages. If 'fail' is specified, any condition will cause an exception. If 'ignore' is specified," >&2
  echo "              all conditions are silently ignored. If R is omitted, the default is 'log'. If <I>-c</I> is omitted, the default is" >&2
  echo "              'log,log'." >&2
  echo "" >&2
  echo "  -f outFile  If -f is defined, output is written to the specified outFile, relative to the given outDir." >&2
  echo "              If omitted, the default outFile is derived from the apiSpec." >&2
  echo "" >&2
  echo "  -o outDir   If -o is defined, output is written to the specified directory. If omitted, the default outDir is" >&2
  echo "              the directory containing the apiSpec or, if reading from standard input, the current working directory." >&2
  echo "              If an output path cannot be derived, output is written to standard output." >&2
  echo "" >&2
  echo "  -J          If -J is defined, test definition output is transformed into Java source" >&2
  echo "              code for a JUnit test class. The resulting Java source file is written to" >&2
  echo "              the specified outDir." >&2
  echo "" >&2
  echo "  -H          If -H is defined, test definition output is transformed into an HTML report" >&2
  echo "              that is written to the specified outDir." >&2
  echo "" >&2
  echo "  -x xsltDef  If -x is defined, test definition output is transformed according to the" >&2
  echo "              XSLT transform defined by the xsltDef file. If relative, the xsltDef path is" >&2
  echo "              assumed to be relative to the directory containing the apiSpec." >&2
  echo "" >&2
  echo "  -p name=value  Defines the value of a transform parameter. Any number of -p options" >&2
  echo "              may be specified. This option is meaningful only if the -x or -J option is given." >&2
  echo "" >&2
  echo "  -r seed     When -D is specified, use the given random number seed to generate request test case" >&2
  echo "              input values. If omitted, the default random number seed is derived from the 'apiSpec' name." >&2
  echo "" >&2
  echo "  -m maxTries When -D is specified, defines the maximum attempts made to resolve a request test case input" >&2
  echo "              value before reporting failure. If omitted, the default value is 10000." >&2
  echo "" >&2
  echo "  -T docType  Defines the content type of the OpenApi specification. The 'docType' must be one of 'json', 'yaml'," >&2
  echo "              or 'yml'. If omitted, the default content type is derived from the 'apiSpec' name. " >&2
  echo "              If the 'apiSpec' is read from standard input or does not have a recognized extension, the default" >&2
  echo "              content type is 'json'." >&2
  echo "" >&2
  echo "  -v          Prints the current command version identifier to standard output." >&2
  echo "" >&2
  echo "  apiSpec     An OpenApi v3 API spec is read from the given apiSpec file. If omitted, the API spec is read from" >&2
  echo "              standard input. If no outFile is specified, output is written to a default file derived from the" >&2
  echo "              apiSpec or, if no apiSpec is given, to standard output." >&2
  echo "" >&2
  echo "              Suppose that the base name of apiSpec (less any extension) is B. Then, assuming defaults for all" >&2
  echo "              options, output will be a test definition for API requests written to a file named 'B-Requests-Test.json'." >&2
  echo "              If -C is specified, output will be a test definition for API responses written to a file named" >&2 
  echo "              'B-Responses-Test.json'. If -D is specified, output will be a list of request test cases written to a file" >&2
  echo "              named 'B-Request-Cases.json'. If -I is specified, output will be the corresponding input definition, written" >&2
  echo "              to either 'B-Requests-Input.json' or 'B-Responses-Input.json', respectively." >&2
}

while [ $# -gt 0 ] ; do
  case $1 in
    -C) isClient="$1";;
    -S) isServer="$1";;
    -D) isRequestCases="$1";;
    -I) isInput="$1";;
    -R) enforceRO="$1";;
    -W) enforceWO="$1";;
    -l) shift; logFile="$1";;
    -L) shift; logLevel="$1";;
    -f) shift; outFile="$1";;
    -o) shift; outDir="$1";;
    -c) shift; notifier="$1";;
    -H) isHtml="$1";;
    -J) isJUnit="$1";;
    -x) shift; xsltDef="$1";;
    -p) shift; params="$params -p $1";;
    -r) shift; random="$1";;
    -m) shift; maxTries="$1";;
    -T) shift; contentType="$1";;
    -v) showVersion="$1";;
    -*) usage; exit 1;;
     *) break;;
  esac
  shift
done

logFile=${logFile:-${pgm}.log}
logLevel=${logLevel:-INFO}
if [ $logFile = "stdout" ] ; then
  logDest=tcases.log.dest
  logFile=STDOUT
else
  logDest=tcases.log.file
fi
apiSpec="$1"
shift

if [ $# -ne 0 ] ; then
  usage; exit 1
fi

binDir=`dirname $0`
releaseDir=`cd $binDir/..; pwd`
libDir=${releaseDir}/lib

classPath=${libDir}
for jar in ${libDir}/*.jar; do
  classPath="${classPath}:${jar}"
done

uname=`uname`
cygwin=`expr $uname : 'CYGWIN'`
if [ $cygwin -gt 0 ] ; then
  classPath=`cygpath --path -m "$classPath"`
  apiSpec=${apiSpec:+`cygpath -m "$apiSpec"`}
  logFile=`cygpath -m "$logFile"`
  outDir=${outDir:+`cygpath -m "$outDir"`}
  outFile=${outFile:+`cygpath -m "$outFile"`}
  xsltDef=${xsltDef:+`cygpath -m "$xsltDef"`}
fi


java \
  -cp "$classPath" \
  -D${logDest}="$logFile" \
  -Dtcases.log.level="$logLevel" \
  org.cornutum.tcases.openapi.ApiCommand \
  $showVersion \
  $isClient \
  $isServer \
  $isRequestCases \
  $isInput \
  $enforceRO \
  $enforceWO \
  ${notifier:+-c "$notifier"} \
  ${outDir:+-o "$outDir"} \
  ${outFile:+-f "$outFile"} \
  $isJUnit \
  $isHtml \
  ${xsltDef:+-x "$xsltDef"} \
  ${params} \
  ${random:+-r "$random"} \
  ${maxTries:+-m "$maxTries"} \
  ${contentType:+-T "$contentType"} \
  ${apiSpec:+"$apiSpec"}

